/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author xbarn
 */
public class BlackList_frame extends javax.swing.JFrame {

    private String pathDBfile = "C:\\Users\\xbarn\\Documents\\";
    private String nomDB = "BlackList.csv";
    private String tempNomDB = "BlackList2.csv";
    private String[] nomColumnes = {"IP", "AddedOn", "AddedBy"};
    private File file;

    /**
     * Creates new form BlackList_frame
     */
    public BlackList_frame() {
        initComponents();
        initFile();
    }
    
     /**
     * Aquest constructor crearà en cas necessari un fitxer per a emmagatzemar la blacklist, i en cas de que ja hi estigui només afegirà la ip del parametre
     * @param IP donarem la IP
     * 
     */
    public BlackList_frame(String IP){
        
         if (new File(pathDBfile + "\\" + nomDB).exists()) {
            file = new File(pathDBfile + "\\" + nomDB);
            addBlockedIP(IP);
        } else {
            try (PrintWriter writer = new PrintWriter(new File(pathDBfile + "\\" + nomDB))) {

                StringBuilder sb = new StringBuilder();
                for (String element : nomColumnes) {
                    sb.append(element);
                    sb.append(',');
                }
                sb.append('\n');
                writer.write(sb.toString());
                writer.close();
            } catch (Exception e) {

            }
        }

    }

     /**
     * Aquest mètode crearà en cas necessari un fitxer per a emmagatzemar la blacklist (en cas que no estigui ja creada)
     * També carregarà la blacklist a pantalla. 
     * 
     */
    
    public void initFile() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        if (new File(pathDBfile + "\\" + nomDB).exists()) {
            file = new File(pathDBfile + "\\" + nomDB);
            loadList();
        } else {

            try (PrintWriter writer = new PrintWriter(new File(pathDBfile + "\\" + nomDB))) {

                StringBuilder sb = new StringBuilder();
                for (String element : nomColumnes) {
                    sb.append(element);
                    sb.append(',');
                }
                sb.append('\n');
                writer.write(sb.toString());
                writer.close();
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
    }

     /**
     * Aquest mètode afegirà una IP a la black list. 
     * @param IP donarem la IP
     * 
     */
    
    public void addBlockedIP(String IP) {
        try {

            Writer output;
            output = new BufferedWriter(new FileWriter(pathDBfile + "\\" + nomDB, true));
            output.append(IP + "," + new SimpleDateFormat("yyyy-MM-dd").format(new Date()) + "," + "xavier" + '\n');
            output.close();

        } catch (Exception e) {
        }
    }

     /**
     * Aquest mètode esborrarà una ip de la blacklist
     * @param IP donarem la IP a esborrar
     * 
     */
    
    public void removeBlockedIP(String IP) {

        try {
            String fileFull = pathDBfile + nomDB;
            String tempFileFull = pathDBfile + tempNomDB;
            BufferedReader reader = new BufferedReader(new FileReader(fileFull));
            BufferedWriter writer = new BufferedWriter(new FileWriter(tempFileFull));
            String currentLine;

            while ((currentLine = reader.readLine()) != null) {
                String trimmedLine = currentLine.trim();
                if (trimmedLine.contains(IP)) {
                    continue;
                }
                writer.write(currentLine + System.getProperty("line.separator"));
            }
            writer.close();
            reader.close();

            File toDelete = new File(fileFull);
            Files.deleteIfExists(toDelete.toPath());
            new File(tempFileFull).renameTo(new File(fileFull));
        } catch (Exception e) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setForeground(new java.awt.Color(0, 0, 0));

        jTable1.setForeground(new java.awt.Color(0, 0, 0));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "IP", "Added On", "Added By"
            }
        ){
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }}
        );
        jTable1.setGridColor(new java.awt.Color(0, 0, 0));
        jTable1.setInheritsPopupMenu(true);
        jTable1.setSurrendersFocusOnKeystroke(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     /**
     * Aquest mètode mirarà si es fa doble click sobre la taula i un record. 
     * En aquest cas, preguntarà si s'ha d'esborrar la ip. en aquest cas, l'esborrar. 
     * 
     */
    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        if (evt.getClickCount() >= 2) {
            //Carreguem el model de la taula. 
            DefaultTableModel model = (DefaultTableModel) this.jTable1.getModel();
            DefaultTableModel old = (DefaultTableModel) this.jTable1.getModel();
            //Agafem la row seleccionada i mirem la IP. 
            String IP = this.jTable1.getValueAt(this.jTable1.getSelectedRow(), 0).toString();
            //Preguntem si volen esborrar-la
            Question_Frame qf = new Question_Frame("Vols esborrar aquesta IP de la black List  " + IP + " ?", true, IP);
            //Si es afirmatiu. 
            if (qf.isToRemove()) {
                //Creem un fitxer temporal a on carregarem les dades que volem conservar, es a dir totes menys la que volgeum esborrar. 
                model.addRow(new Object[]{this.jTable1.getValueAt(this.jTable1.getSelectedRow(), 0), this.jTable1.getValueAt(this.jTable1.getSelectedRow(), 1), 0});
                old.removeRow(jTable1.getSelectedRow());
                this.removeBlockedIP(IP);
                jTable1.requestFocus();
                //Un cop creat el fitxer temporal, esborem el vell i renombrem el nou. 
                jTable1.setRowSelectionInterval(jTable1.getRowCount() - 1, jTable1.getRowCount() - 1);
                jTable1.editCellAt(jTable1.getRowCount() - 1, 2);
            }

        }
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BlackList_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BlackList_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BlackList_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BlackList_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BlackList_frame().setVisible(true);
            }
        });
    }
     /**
     * Aquest mètode carregarà la blacklist al fram, a la taula . 
     * 
     */
    private void loadList() {
        try {
            //Agafem el model de la taula del frame. 
            DefaultTableModel tableModel = (DefaultTableModel) this.jTable1.getModel();
            //Llegim el fitxer a memoria
            BufferedReader br = new BufferedReader(new FileReader(file));
            //Per cada separador, agafem les dades que necessitem. 
            String st;
            while ((st = br.readLine()) != null) {
                st = st.replaceAll(";", "");
                String[] arrOfStr = st.split(",", 10);
                if (!arrOfStr[0].equals("IP")) {
                    tableModel.insertRow(0, new Object[]{arrOfStr[0], arrOfStr[1], arrOfStr[2]});
                }
            }
            br.close();

        } catch (Exception e) {
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
